import { resolve } from 'node:path'
import { expect, it } from 'vitest'
import { getPackageExportsManifest } from 'vitest-package-exports'

it('exports snapshot', async () => {
  const manifest = await getPackageExportsManifest({
    importMode: 'package', // or 'dist' or 'package'
    cwd: resolve(import.meta.dirname, '../../../packages/vitest'),
  })

  expect(manifest.exports)
    .toMatchInlineSnapshot(`
      {
        ".": {
          "afterAll": "function",
          "afterEach": "function",
          "assert": "function",
          "assertType": "function",
          "beforeAll": "function",
          "beforeEach": "function",
          "bench": "function",
          "chai": "object",
          "createExpect": "function",
          "describe": "function",
          "expect": "function",
          "expectTypeOf": "function",
          "getRunningMode": "function",
          "inject": "function",
          "isFirstRun": "function",
          "isWatchMode": "function",
          "it": "function",
          "onTestFailed": "function",
          "onTestFinished": "function",
          "runOnce": "function",
          "should": "function",
          "suite": "function",
          "test": "function",
          "vi": "object",
          "vitest": "object",
        },
        "./browser": {
          "SpyModule": "object",
          "collectTests": "function",
          "getCoverageProvider": "function",
          "loadDiffConfig": "function",
          "loadSnapshotSerializers": "function",
          "processError": "function",
          "setupCommonEnv": "function",
          "startCoverageInsideWorker": "function",
          "startTests": "function",
          "stopCoverageInsideWorker": "function",
          "takeCoverageInsideWorker": "function",
        },
        "./config": {
          "configDefaults": "object",
          "coverageConfigDefaults": "object",
          "defaultBrowserPort": "number",
          "defaultExclude": "object",
          "defaultInclude": "object",
          "defineConfig": "function",
          "defineProject": "function",
          "defineWorkspace": "function",
          "extraInlineDeps": "object",
          "mergeConfig": "function",
        },
        "./coverage": {
          "BaseCoverageProvider": "function",
        },
        "./environments": {
          "builtinEnvironments": "object",
          "populateGlobal": "function",
        },
        "./execute": {
          "VitestExecutor": "function",
        },
        "./mocker": {
          "AutomockedModule": "function",
          "AutospiedModule": "function",
          "ManualMockedModule": "function",
          "MockerRegistry": "function",
          "RedirectedModule": "function",
          "mockObject": "function",
        },
        "./node": {
          "BaseSequencer": "function",
          "GitNotFoundError": "function",
          "TestFile": "function",
          "TestsNotFoundError": "function",
          "VitestPackageInstaller": "function",
          "VitestPlugin": "function",
          "createDebugger": "function",
          "createMethodsRPC": "function",
          "createServer": "function",
          "createViteLogger": "function",
          "createViteServer": "function",
          "createVitest": "function",
          "distDir": "string",
          "esbuildVersion": "string",
          "generateFileHash": "function",
          "getFilePoolName": "function",
          "isFileServingAllowed": "function",
          "isValidApiRequest": "function",
          "parseAst": "function",
          "parseAstAsync": "function",
          "parseCLI": "function",
          "registerConsoleShortcuts": "function",
          "resolveApiServerConfig": "function",
          "resolveConfig": "function",
          "resolveFsAllow": "function",
          "rollupVersion": "string",
          "rootDir": "string",
          "startVitest": "function",
          "version": "string",
          "viteVersion": "string",
        },
        "./reporters": {
          "BasicReporter": "function",
          "BenchmarkReporter": "function",
          "BenchmarkReportsMap": "object",
          "DefaultReporter": "function",
          "DotReporter": "function",
          "GithubActionsReporter": "function",
          "HangingProcessReporter": "function",
          "JUnitReporter": "function",
          "JsonReporter": "function",
          "ReportersMap": "object",
          "TapFlatReporter": "function",
          "TapReporter": "function",
          "VerboseBenchmarkReporter": "function",
          "VerboseReporter": "function",
        },
        "./runners": {
          "NodeBenchmarkRunner": "function",
          "VitestTestRunner": "function",
        },
        "./snapshot": {
          "VitestSnapshotEnvironment": "function",
        },
        "./suite": {
          "createChainable": "function",
          "createTaskCollector": "function",
          "getBenchFn": "function",
          "getBenchOptions": "function",
          "getCurrentSuite": "function",
          "getCurrentTest": "function",
          "getFn": "function",
          "getHooks": "function",
          "setFn": "function",
          "setHooks": "function",
        },
        "./utils": {
          "TraceMap": "function",
          "assertTypes": "function",
          "clone": "function",
          "createDefer": "function",
          "createSimpleStackTrace": "function",
          "createStackString": "function",
          "deepClone": "function",
          "deepMerge": "function",
          "eachMapping": "function",
          "format": "function",
          "generatedPositionFor": "function",
          "getCallLastIndex": "function",
          "getOwnProperties": "function",
          "getSafeTimers": "function",
          "getType": "function",
          "highlight": "function",
          "inspect": "function",
          "isNegativeNaN": "function",
          "isObject": "function",
          "isPrimitive": "function",
          "lineSplitRE": "object",
          "nanoid": "function",
          "noop": "function",
          "notNullish": "function",
          "objDisplay": "function",
          "objectAttr": "function",
          "offsetToLineNumber": "function",
          "originalPositionFor": "function",
          "parseErrorStacktrace": "function",
          "parseRegexp": "function",
          "parseSingleFFOrSafariStack": "function",
          "parseSingleStack": "function",
          "parseSingleV8Stack": "function",
          "parseStacktrace": "function",
          "positionToOffset": "function",
          "setSafeTimers": "function",
          "shuffle": "function",
          "slash": "function",
          "stringify": "function",
          "toArray": "function",
        },
        "./workers": {
          "collectVitestWorkerTests": "function",
          "createForksRpcOptions": "function",
          "createThreadsRpcOptions": "function",
          "provideWorkerState": "function",
          "runBaseTests": "function",
          "runVitestWorker": "function",
          "runVmTests": "function",
          "unwrapSerializableConfig": "function",
        },
      }
    `)
})
