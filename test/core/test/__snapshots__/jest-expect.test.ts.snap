// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`asymmetric matcher error 1`] = `
{
  "actual": "hello",
  "diff": undefined,
  "expected": "StringContaining "xx"",
  "message": "expected 'hello' to deeply equal StringContaining "xx"",
}
`;

exports[`asymmetric matcher error 2`] = `
{
  "actual": "hello",
  "diff": undefined,
  "expected": "StringNotContaining "ll"",
  "message": "expected 'hello' to deeply equal StringNotContaining "ll"",
}
`;

exports[`asymmetric matcher error 3`] = `
{
  "actual": "Object {
  "foo": "hello",
}",
  "diff": "- Expected
+ Received

  {
-   "foo": StringContaining "xx",
+   "foo": "hello",
  }",
  "expected": "Object {
  "foo": StringContaining "xx",
}",
  "message": "expected { foo: 'hello' } to deeply equal { foo: StringContaining "xx" }",
}
`;

exports[`asymmetric matcher error 4`] = `
{
  "actual": "Object {
  "foo": "hello",
}",
  "diff": "- Expected
+ Received

  {
-   "foo": StringNotContaining "ll",
+   "foo": "hello",
  }",
  "expected": "Object {
  "foo": StringNotContaining "ll",
}",
  "message": "expected { foo: 'hello' } to deeply equal { foo: StringNotContaining "ll" }",
}
`;

exports[`asymmetric matcher error 5`] = `
{
  "actual": "hello",
  "diff": "- Expected: 
stringContainingCustom<"xx">

+ Received: 
"hello"",
  "expected": "stringContainingCustom<"xx">",
  "message": "expected 'hello' to deeply equal stringContainingCustom<"xx">",
}
`;

exports[`asymmetric matcher error 6`] = `
{
  "actual": "hello",
  "diff": "- Expected: 
not.stringContainingCustom<"ll">

+ Received: 
"hello"",
  "expected": "not.stringContainingCustom<"ll">",
  "message": "expected 'hello' to deeply equal not.stringContainingCustom<"ll">",
}
`;

exports[`asymmetric matcher error 7`] = `
{
  "actual": "Object {
  "foo": "hello",
}",
  "diff": "- Expected
+ Received

  {
-   "foo": stringContainingCustom<"xx">,
+   "foo": "hello",
  }",
  "expected": "Object {
  "foo": stringContainingCustom<"xx">,
}",
  "message": "expected { foo: 'hello' } to deeply equal { foo: stringContainingCustom<"xx"> }",
}
`;

exports[`asymmetric matcher error 8`] = `
{
  "actual": "Object {
  "foo": "hello",
}",
  "diff": "- Expected
+ Received

  {
-   "foo": not.stringContainingCustom<"ll">,
+   "foo": "hello",
  }",
  "expected": "Object {
  "foo": not.stringContainingCustom<"ll">,
}",
  "message": "expected { foo: 'hello' } to deeply equal { foo: not.stringContainingCustom{…} }",
}
`;

exports[`asymmetric matcher error 9`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "undefined",
  "message": "expected "hello" to contain "xx"",
}
`;

exports[`asymmetric matcher error 10`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "undefined",
  "message": "expected "hello" not to contain "ll"",
}
`;

exports[`asymmetric matcher error 11`] = `
{
  "actual": "hello",
  "diff": "- Expected: 
testComplexMatcher<Object {
  "x": "y",
}>

+ Received: 
"hello"",
  "expected": "testComplexMatcher<Object {
  "x": "y",
}>",
  "message": "expected 'hello' to deeply equal testComplexMatcher{…}",
}
`;

exports[`asymmetric matcher error 12`] = `
{
  "actual": "Object {
  "k": "v",
  "k2": "v2",
}",
  "diff": "- Expected
+ Received

- ObjectContaining {
+ {
    "k": "v",
-   "k3": "v3",
+   "k2": "v2",
  }",
  "expected": "ObjectContaining {
  "k": "v",
  "k3": "v3",
}",
  "message": "expected { k: 'v', k2: 'v2' } to deeply equal ObjectContaining {"k": "v", "k3": "v3"}",
}
`;

exports[`asymmetric matcher error 13`] = `
{
  "actual": "Array [
  "a",
  "b",
]",
  "diff": "- Expected
+ Received

- ArrayContaining [
+ [
    "a",
-   "c",
+   "b",
  ]",
  "expected": "ArrayContaining [
  "a",
  "c",
]",
  "message": "expected [ 'a', 'b' ] to deeply equal ArrayContaining ["a", "c"]",
}
`;

exports[`asymmetric matcher error 14`] = `
{
  "actual": "hello",
  "diff": undefined,
  "expected": "StringMatching /xx/",
  "message": "expected 'hello' to deeply equal StringMatching /xx/",
}
`;

exports[`asymmetric matcher error 15`] = `
{
  "actual": "2.5",
  "diff": "- Expected
+ Received

- NumberCloseTo 2 (1 digit)
+ 2.5",
  "expected": "NumberCloseTo 2 (1 digit)",
  "message": "expected 2.5 to deeply equal NumberCloseTo 2 (1 digit)",
}
`;

exports[`asymmetric matcher error 16`] = `
{
  "actual": "foo",
  "diff": "- Expected: 
toBeOneOf<Array [
  "bar",
  "baz",
]>

+ Received: 
"foo"",
  "expected": "toBeOneOf<Array [
  "bar",
  "baz",
]>",
  "message": "expected 'foo' to deeply equal toBeOneOf<Array [
  "bar",
  "baz",
]>",
}
`;

exports[`asymmetric matcher error 17`] = `
{
  "actual": "0",
  "diff": "- Expected: 
toBeOneOf<Array [
  Any<String>,
  null,
  undefined,
]>

+ Received: 
0",
  "expected": "toBeOneOf<Array [
  Any<String>,
  null,
  undefined,
]>",
  "message": "expected +0 to deeply equal toBeOneOf{…}",
}
`;

exports[`asymmetric matcher error 18`] = `
{
  "actual": "Object {
  "k": "v",
  "k2": "v2",
}",
  "diff": "- Expected: 
toBeOneOf<Array [
  ObjectContaining {
    "k": "v",
    "k3": "v3",
  },
  null,
  undefined,
]>

+ Received: 
{
  "k": "v",
  "k2": "v2",
}",
  "expected": "toBeOneOf<Array [
  ObjectContaining {
    "k": "v",
    "k3": "v3",
  },
  null,
  undefined,
]>",
  "message": "expected { k: 'v', k2: 'v2' } to deeply equal toBeOneOf{…}",
}
`;

exports[`asymmetric matcher error 19`] = `
{
  "actual": "hello",
  "diff": undefined,
  "expected": "StringContaining "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"",
  "message": "expected 'hello' to deeply equal StringContaining{…}",
}
`;

exports[`asymmetric matcher error 20`] = `
{
  "actual": "hello",
  "diff": undefined,
  "expected": "StringContaining "xx"",
  "message": "expected error to match asymmetric matcher",
}
`;

exports[`asymmetric matcher error 21`] = `
{
  "actual": "hello",
  "diff": "- Expected: 
stringContainingCustom<"xx">

+ Received: 
"hello"",
  "expected": "stringContainingCustom<"xx">",
  "message": "expected error to match asymmetric matcher",
}
`;

exports[`asymmetric matcher error 22`] = `
{
  "actual": "hello",
  "diff": undefined,
  "expected": "StringContaining "ll"",
  "message": "expected error not to match asymmetric matcher",
}
`;

exports[`asymmetric matcher error 23`] = `
{
  "actual": "hello",
  "diff": "- Expected: 
stringContainingCustom<"ll">

+ Received: 
"hello"",
  "expected": "stringContainingCustom<"ll">",
  "message": "expected error not to match asymmetric matcher",
}
`;

exports[`asymmetric matcher error 24`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected: 
StringContaining "ll"

+ Received: 
Error {
  "message": "hello",
}",
  "expected": "StringContaining "ll"",
  "message": "expected error to match asymmetric matcher",
}
`;

exports[`asymmetric matcher error 25`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected: 
stringContainingCustom<"ll">

+ Received: 
Error {
  "message": "hello",
}",
  "expected": "stringContainingCustom<"ll">",
  "message": "expected error to match asymmetric matcher",
}
`;

exports[`asymmetric matcher error 26`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected: 
[Function MyError1]

+ Received: 
MyError2 {
  "message": "hello",
}",
  "expected": "[Function MyError1]",
  "message": "expected error to be instance of MyError1",
}
`;

exports[`diff 1`] = `
{
  "actual": "undefined",
  "diff": "- Expected: 
true

+ Received: 
undefined",
  "expected": "true",
  "message": "expected undefined to be truthy",
}
`;

exports[`diff 2`] = `
{
  "actual": "Object {
  "hello": "world",
}",
  "diff": "- Expected: 
false

+ Received: 
{
  "hello": "world",
}",
  "expected": "false",
  "message": "expected { hello: 'world' } to be falsy",
}
`;

exports[`diff 3`] = `
{
  "actual": "Object {
  "hello": "world",
}",
  "diff": "- Expected: 
NaN

+ Received: 
{
  "hello": "world",
}",
  "expected": "NaN",
  "message": "expected { hello: 'world' } to be NaN",
}
`;

exports[`diff 4`] = `
{
  "actual": "Object {
  "hello": "world",
}",
  "diff": "- Expected: 
undefined

+ Received: 
{
  "hello": "world",
}",
  "expected": "undefined",
  "message": "expected { hello: 'world' } to be undefined",
}
`;

exports[`diff 5`] = `
{
  "actual": "Object {
  "hello": "world",
}",
  "diff": "- Expected: 
null

+ Received: 
{
  "hello": "world",
}",
  "expected": "null",
  "message": "expected { hello: 'world' } to be null",
}
`;

exports[`error equality 1`] = `
{
  "actual": "[Error: hi]",
  "diff": "- Expected
+ Received

  MyError {
    "message": "hi",
-   "custom": "b",
+   "custom": "a",
  }",
  "expected": "[Error: hi]",
  "message": "expected Error: hi { custom: 'a' } to deeply equal Error: hi { custom: 'b' }",
}
`;

exports[`error equality 2`] = `
{
  "actual": "[Error: hi]",
  "diff": "- Expected
+ Received

  MyError {
    "message": "hi",
-   "custom": "b",
+   "custom": "a",
  }",
  "expected": "[Error: hi]",
  "message": "expected a thrown error to be Error: hi { custom: 'b' }",
}
`;

exports[`error equality 3`] = `
{
  "actual": "[Error: hi]",
  "diff": "- Expected
+ Received

  MyError {
-   "message": "hello",
+   "message": "hi",
    "custom": "a",
  }",
  "expected": "[Error: hello]",
  "message": "expected Error: hi { custom: 'a' } to deeply equal Error: hello { custom: 'a' }",
}
`;

exports[`error equality 4`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

- YourError {
+ MyError {
    "message": "hello",
    "custom": "a",
  }",
  "expected": "[Error: hello]",
  "message": "expected Error: hello { custom: 'a' } to deeply equal Error: hello { custom: 'a' }",
}
`;

exports[`error equality 5`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

  Error {
    "message": "hello",
-   "cause": "y",
+   "cause": "x",
  }",
  "expected": "[Error: hello]",
  "message": "expected Error: hello to deeply equal Error: hello",
}
`;

exports[`error equality 6`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

  Error {
    "message": "hello",
-   "cause": "y",
  }",
  "expected": "[Error: hello]",
  "message": "expected Error: hello to deeply equal Error: hello",
}
`;

exports[`error equality 7`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

  Error {
-   "message": "world",
+   "message": "hello",
  }",
  "expected": "[Error: world]",
  "message": "expected Error: hello to deeply equal Error: world",
}
`;

exports[`error equality 8`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

- {
-   "something": "else",
+ Error {
+   "message": "hello",
+   "cause": "x",
  }",
  "expected": "Object {
  "something": "else",
}",
  "message": "expected Error: hello to deeply equal { something: 'else' }",
}
`;

exports[`error equality 9`] = `
{
  "actual": "[AggregateError: outer]",
  "diff": "- Expected
+ Received

  AggregateError {
    "message": "outer",
    "cause": "x",
    "errors": [
      Error {
        "message": "inner",
-       "cause": "y",
+       "cause": "x",
      },
    ],
  }",
  "expected": "[AggregateError: outer]",
  "message": "expected AggregateError: outer { …(1) } to deeply equal AggregateError: outer { …(1) }",
}
`;

exports[`error equality 10`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

  Error {
-   "message": "world",
+   "message": "hello",
    "cause": [Circular],
  }",
  "expected": "[Error: world]",
  "message": "expected Error: hello to deeply equal Error: world",
}
`;

exports[`error equality 11`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

- ObjectContaining {
-   "cause": "y",
+ Error {
    "message": "hello",
+   "cause": "x",
  }",
  "expected": "ObjectContaining {
  "cause": "y",
  "message": "hello",
}",
  "message": "expected Error: hello to deeply equal ObjectContaining{…}",
}
`;

exports[`error equality 12`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

- ObjectContaining {
+ Error {
+   "message": "hello",
    "cause": "x",
-   "message": "world",
  }",
  "expected": "ObjectContaining {
  "cause": "x",
  "message": "world",
}",
  "message": "expected Error: hello to deeply equal ObjectContaining{…}",
}
`;

exports[`error equality 13`] = `
{
  "actual": "[Error: hello]",
  "diff": "- Expected
+ Received

- ObjectContaining {
-   "cause": "y",
-   "message": "world",
+ Error {
+   "message": "hello",
+   "cause": "x",
  }",
  "expected": "ObjectContaining {
  "cause": "y",
  "message": "world",
}",
  "message": "expected Error: hello to deeply equal ObjectContaining{…}",
}
`;

exports[`toBeOneOf() > error message 1`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "undefined",
  "message": "expect(received).toBeOneOf()

Expected value to be one of:
Array [
  0,
  1,
  2,
]

Received:
3",
}
`;

exports[`toBeOneOf() > error message 2`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "undefined",
  "message": "expect(received).toBeOneOf()

Expected value to be one of:
Array [
  Any<String>,
]

Received:
3",
}
`;

exports[`toBeOneOf() > error message 3`] = `
{
  "actual": "Object {
  "a": 0,
}",
  "diff": "- Expected: 
toBeOneOf<Array [
  ObjectContaining {
    "b": 0,
  },
  null,
  undefined,
]>

+ Received: 
{
  "a": 0,
}",
  "expected": "toBeOneOf<Array [
  ObjectContaining {
    "b": 0,
  },
  null,
  undefined,
]>",
  "message": "expected { a: +0 } to deeply equal toBeOneOf{…}",
}
`;

exports[`toBeOneOf() > error message 4`] = `
{
  "actual": "Object {
  "name": "mango",
}",
  "diff": "- Expected
+ Received

  {
-   "name": toBeOneOf<Array [
-   "apple",
-   "banana",
-   "orange",
- ]>,
+   "name": "mango",
  }",
  "expected": "Object {
  "name": toBeOneOf<Array [
  "apple",
  "banana",
  "orange",
]>,
}",
  "message": "expected { name: 'mango' } to deeply equal { name: toBeOneOf{…} }",
}
`;

exports[`toHaveBeenNthCalledWith error 1`] = `
{
  "actual": "Array [
  "Hi",
]",
  "diff": "- Expected
+ Received

  [
-   "hey",
+   "Hi",
  ]",
  "expected": "Array [
  "hey",
]",
  "message": "expected 2nd "spy" call to have been called with [ 'hey' ]",
}
`;

exports[`toHaveBeenNthCalledWith error 2`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "Array [
  "hey",
]",
  "message": "expected 3rd "spy" call to have been called with [ 'hey' ], but called only 2 times",
}
`;

exports[`toMatch/toContain diff 1`] = `
{
  "actual": "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello",
  "diff": "Expected: "world"
Received: "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello"",
  "expected": "world",
  "message": "expected 'hellohellohellohellohellohellohellohe…' to contain 'world'",
}
`;

exports[`toMatch/toContain diff 2`] = `
{
  "actual": "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello",
  "diff": "Expected: "world"
Received: "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello"",
  "expected": "world",
  "message": "expected 'hellohellohellohellohellohellohellohe…' to match 'world'",
}
`;

exports[`toMatch/toContain diff 3`] = `
{
  "actual": "hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello",
  "diff": "- Expected: 
/world/

+ Received: 
"hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello"",
  "expected": "/world/",
  "message": "expected 'hellohellohellohellohellohellohellohe…' to match /world/",
}
`;

exports[`toSatisfy() > error message 1`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "undefined",
  "message": "expect(received).toSatisfy()

Expected value to satisfy:
[Function isOdd]

Received:
2",
}
`;

exports[`toSatisfy() > error message 2`] = `
{
  "actual": "undefined",
  "diff": undefined,
  "expected": "undefined",
  "message": "expect(received).toSatisfy()

Expected value to satisfy:
ODD

Received:
2",
}
`;

exports[`toSatisfy() > error message 3`] = `
{
  "actual": "Object {
  "value": 2,
}",
  "diff": "- Expected
+ Received

  {
-   "value": toSatisfy<[Function isOdd]>,
+   "value": 2,
  }",
  "expected": "Object {
  "value": toSatisfy<[Function isOdd]>,
}",
  "message": "expected { value: 2 } to deeply equal { value: toSatisfy<[Function isOdd]> }",
}
`;

exports[`toSatisfy() > error message 4`] = `
{
  "actual": "Object {
  "value": 2,
}",
  "diff": "- Expected
+ Received

  {
-   "value": toSatisfy<[Function isOdd], "ODD">,
+   "value": 2,
  }",
  "expected": "Object {
  "value": toSatisfy<[Function isOdd], "ODD">,
}",
  "message": "expected { value: 2 } to deeply equal { value: toSatisfy{…} }",
}
`;
