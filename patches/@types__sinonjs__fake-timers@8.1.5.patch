diff --git a/index.d.ts b/index.d.ts
index 5aa018cde4336aca4dadefb8338549c378792e14..d3a07cc966f10c70950fc8e2e8b897038a7a6a11 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -84,12 +84,12 @@ export interface GlobalTimers<TTimerId extends TimerId> {
  */
 export interface NodeTimer {
     /**
-     * Stub method call. Does nothing.
+     * Marks the timer as referenced.
      */
     ref(): NodeTimer;
 
     /**
-     * Stub method call. Does nothing.
+     * Marks the timer as unreferenced.
      */
     unref(): NodeTimer;
 
@@ -97,6 +97,11 @@ export interface NodeTimer {
      * Refreshes the timer.
      */
     refresh(): NodeTimer;
+
+    /**
+     * Returns true if the timer will keep the event loop active.
+     */
+    hasRef(): boolean;
 }
 
 /**
@@ -104,6 +109,18 @@ export interface NodeTimer {
  */
 export type TimerId = number | NodeTimer;
 
+/**
+ * Allows configuring how the clock advances time, automatically or manually.
+ *
+ * - `manual`: Timers do not advance without explicit, manual calls to the tick APIs (`clock.nextAsync`, `clock.runAllAsync`, etc).
+ * - `nextAsync`: The clock will continuously break the event loop, then run the next timer until the mode changes.
+ * - `interval`: This is the same as specifying `shouldAdvanceTime: true` with an `advanceTimeDelta`. If the delta is not specified, 20 will be used by default.
+ */
+export type TimerTickMode =
+    | { mode: "manual" }
+    | { mode: "nextAsync" }
+    | { mode: "interval"; delta?: number };
+
 /**
  * Controls the flow of time.
  */
@@ -246,6 +263,18 @@ export interface FakeClock<TTimerId extends TimerId> extends GlobalTimers<TTimer
      */
     runToLastAsync: () => Promise<number>;
 
+    /**
+     * Advances the clock by `time` milliseconds.
+     *
+     * Any timers within the affected range will be moved to the end of the range.
+     * Then, the clock will be advanced by `time` milliseconds, firing any timers
+     * that are now due.
+     *
+     * @param time   How many ticks to advance by.
+     * @returns Fake milliseconds since the unix epoch.
+     */
+    jump: (time: number | string) => number;
+
     /**
      * Simulates a user changing the system clock.
      *
@@ -253,6 +282,12 @@ export interface FakeClock<TTimerId extends TimerId> extends GlobalTimers<TTimer
      * @remarks This affects the current time but it does not in itself cause timers to fire.
      */
     setSystemTime: (now?: number | Date) => void;
+
+    /**
+     * Allows configuring how the clock advances time, automatically or manually.
+     * @param tickModeConfig The new configuration for how the clock should tick.
+     */
+    setTickMode: (tickModeConfig: TimerTickMode) => void;
 }
 
 /**
@@ -356,6 +391,11 @@ export interface FakeTimerInstallOpts {
      * default, leading to potentially unexpected behavior if timers existed prior to installing FakeTimers. (default: false)
      */
     shouldClearNativeTimers?: boolean | undefined;
+
+    /**
+     * Tells FakeTimers to not throw an error when faking a timer that does not exist in the global object. (default: false)
+     */
+    ignoreMissingTimers?: boolean | undefined;
 }
 
 /**
